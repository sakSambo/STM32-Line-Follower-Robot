/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Motor and Servo Test with IR Sensor Read/Calibrate (no PID, no line following)
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
typedef enum {
	STATE_START,
	STATE_APPROACHING_O1,
	STATE_GRAB_O1,
	STATE_Linefollow_O1,
	STATE_LeaveO1_Curve1,
	STATE_SharpTurn_O1,
	STATE_CheckPoint_1,
	STATE_Drop_O1,
	STATE_Leave_O1,
	STATE_Pick_O2,
	STATE_Manual_1,
// Add new states here as you expand your robot logic!
} RobotState;

static RobotState current_state = STATE_START; // Start state
static uint8_t ultrasonic_active = 0;
//static uint8_t object_grabbed = 0;
//static uint8_t object_dropped = 0;
//static uint8_t arm_lowered = 0;
//static uint8_t gripper_closed = 0;
float last_ultrasonic = 999;
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
#define IR_SENSOR_COUNT 8
#define IR_CALIBRATE_ITER 50
#define IR_CALIBRATE_DELAY_MS 20
#define IR_NORMALIZE_MAX   1000
#define ULTRA_MAX_JUMP_CM 70.0f
//// PID gains
//float Kp = 0.18f;   //0.18f for straight lines at 80% pwm duty cycle!
//float Ki = 0.0f;	//0.0f for straight lines at 80% pwm duty cycle!
//float Kd = 22.0f;	//22.0f for straight lines at 80% pwm duty cycle!

float error = 0, last_error = 0;
float integral = 0, derivative = 0;

#define RX_BUFFER_SIZE 16
volatile uint8_t uart2_rx_byte = 0;
volatile uint8_t uart2_command_received = 0;


// ----------- PWM 25kHz: Prescaler = 6, ARR = 479 -----------
// (Timer clock = 84MHz / (PSC+1) = 12MHz. 12,000,000/(479+1) = 25,000 Hz)
#define MOTOR_PWM_ARR 479    // ARR for 25kHz PWM if PSC=6 (for 84MHz timer clock)
#define PWM_MAX      MOTOR_PWM_ARR
#define PWM_100PCT   MOTOR_PWM_ARR
#define PWM_50PCT    (MOTOR_PWM_ARR / 2)
#define PWM_25PCT    (MOTOR_PWM_ARR / 4)
#define PWM_20PCT    (MOTOR_PWM_ARR / 5)
#define PWM_12PCT    (MOTOR_PWM_ARR / 8)

// --- Servo PWM pulse ranges (microseconds) ---
#define SG90_MIN_PULSE_US 300     // 0.3 ms
#define SG90_MAX_PULSE_US 3000    // 3.0 ms
#define SG90_DEFAULT_PULSE_US 500 // this pulse width give 0 angle

#define MG996R_MIN_PULSE_US 300   // 0.3 ms
#define MG996R_MAX_PULSE_US 3000  // 3.0 ms
#define MG996R_DEFAULT_PULSE_US 350

// Motor control pins: TB6612FNG
#define RIGHT_IN1_Pin GPIO_PIN_15
#define RIGHT_IN2_Pin GPIO_PIN_12
#define RIGHT_IN1_GPIO GPIOA
#define RIGHT_IN2_GPIO GPIOA

#define LEFT_IN1_Pin  GPIO_PIN_14
#define LEFT_IN2_Pin  GPIO_PIN_15
#define LEFT_IN1_GPIO GPIOB
#define LEFT_IN2_GPIO GPIOB

uint16_t ir_raw[IR_SENSOR_COUNT] = { 0 };
uint16_t ir_min[IR_SENSOR_COUNT] = { 0 };
uint16_t ir_max[IR_SENSOR_COUNT] = { 0 };
uint16_t ir_normalized[IR_SENSOR_COUNT] = { 0 };
uint8_t ir_calibrated_ready = 0;
uint8_t calibrating = 0;
int32_t ir_position = 0;
int32_t ir_last_position = 0;
int32_t desired_position = 3500;

// Ultrasonic defines
#define TRIG_PIN         GPIO_PIN_3
#define TRIG_PORT        GPIOB
#define ECHO_PIN         GPIO_PIN_4
#define ECHO_PORT        GPIOB

#define TRIG_PULSE_US    10
#define TIMEOUT_ECHO_HI  5000       // Lowered to ~5 ms
#define TIMEOUT_ECHO_LO  15000      // Lowered to ~15 ms
#define SPEED_CM_DIV2_US 0.01755f // (351 m/s) = 0.0351 / 2     // = SPEED_CM_US / 2
#define FILTER_ALPHA     0.2f
#define POSITION_LINGER_MAX 10 // Or whatever number works best for your robot

/* USER CODE BEGIN PV */
volatile uint32_t echo_start = 0, echo_end = 0;
volatile uint8_t echo_captured = 0;
volatile float latest_distance_cm = 0.0f;
volatile uint8_t manual_mode_1_active = 0;

/* Globals -------------------------------------------------------------------*/
// --- IR Pattern Debounce State and Counters ---
static int left_most_event_count = 0;
static int rightMost_event_count = 0;
static int circle_event_count = 0;
static int intersection_event_count = 0;
static uint8_t left_most_latch = 0;
static uint8_t rightMost_latch = 0;
static uint8_t circle_latch = 0;
static uint8_t intersection_latch = 0;
// --- For each pattern, ON and OFF debounce counters ---
static int left_most_on = 0, left_most_off = 0;
static int rightMost_on = 0, rightMost_off = 0;
static int circle_on = 0, circle_off = 0;
static int intersection_on = 0, intersection_off = 0;

volatile uint8_t adc_ready = 0;
float volatile Distance = 0.0f;
uint32_t ErrorCount = 0;
int intersection = 0;
int rightMost = 0;
int leftMost = 0;
int circle = 0;
// At file scope or as static in update_ir_patterns()
static uint8_t left_ir_last = 1, right_ir_last = 1;
static uint32_t left_ir_down_time = 0, right_ir_down_time = 0;
static uint8_t left_ir_counted = 0, right_ir_counted = 0;
#define IR_DEBOUNCE_MS 10

/* Prototypes ---------------------------------------------------------------*/
void TIM2_Init(void);
void TIM2_Delay_us(volatile uint32_t us);
void ultrasonic_trigger(void);
float ultrasonic_read_cm(void);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void line_follow(float Kp, float Ki, float Kd, float base_speed_mult);
float ir_filtered[IR_SENSOR_COUNT] = { 0 };
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define IR_BLACK 2500   // Treat ≥4000 as "black line" (ADC 12-bit max = 4095)
#define IR_WHITE 2000    // Treat ≤2000 as "white line"
#define PATTERN_ON_DEBOUNCE  5   // Number of consecutive ON cycles needed
#define PATTERN_OFF_DEBOUNCE 10  // Number of consecutive OFF cycles needed

void update_ir_patterns(void) {
	// --- LEFTMOST DIGITAL IR (PC15) ---
	uint32_t now = HAL_GetTick();
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET) { // Black detected
		if (left_ir_last) { // Just pressed
			left_ir_down_time = now;
			left_ir_counted = 0;
		}
		if (!left_ir_counted && (now - left_ir_down_time > IR_DEBOUNCE_MS)) {
			left_most_event_count++;
			left_ir_counted = 1;
		}
		left_ir_last = 0;
	} else { // Released
		left_ir_last = 1;
		left_ir_down_time = now;
		left_ir_counted = 0;
	}

	// --- RIGHTMOST DIGITAL IR (PC14) ---
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) { // Black detected
		if (right_ir_last) { // Just pressed
			right_ir_down_time = now;
			right_ir_counted = 0;
		}
		if (!right_ir_counted && (now - right_ir_down_time > IR_DEBOUNCE_MS)) {
			rightMost_event_count++;
			right_ir_counted = 1;
		}
		right_ir_last = 0;
	} else { // Released
		right_ir_last = 1;
		right_ir_down_time = now;
		right_ir_counted = 0;
	}

	// --- Enable intersection/circle only after both left/right events seen twice ---
	static uint8_t enable_intersection_circle = 0;
	if (!enable_intersection_circle && left_most_event_count >= 2
			&& rightMost_event_count >= 2) {
		enable_intersection_circle = 1;
	}

	// --- CIRCLE (same as before, analog QTR logic) ---
	int circle_pattern = (ir_raw[0] >= IR_BLACK) && (ir_raw[7] >= IR_BLACK);
	for (int i = 1; i <= 6 && circle_pattern; ++i) {
		if (ir_raw[i] > IR_WHITE)
			circle_pattern = 0;
	}
	if (circle_pattern) {
		if (circle_on < PATTERN_ON_DEBOUNCE)
			circle_on++;
		circle_off = 0;
	} else {
		if (circle_off < PATTERN_OFF_DEBOUNCE)
			circle_off++;
		circle_on = 0;
	}
	if (!circle_latch && circle_on >= PATTERN_ON_DEBOUNCE
			&& enable_intersection_circle) {
		circle_event_count++;
		circle_latch = 1;
	}
	if (circle_latch && circle_off >= PATTERN_OFF_DEBOUNCE) {
		circle_latch = 0;
	}

	// --- INTERSECTION (same as before, analog QTR logic) ---
	int intersection_pattern = 1;
	for (int i = 0; i < IR_SENSOR_COUNT; ++i) {
		if (ir_raw[i] < IR_BLACK) {
			intersection_pattern = 0;
			break;
		}
	}
	if (intersection_pattern) {
		if (intersection_on < PATTERN_ON_DEBOUNCE)
			intersection_on++;
		intersection_off = 0;
	} else {
		if (intersection_off < PATTERN_OFF_DEBOUNCE)
			intersection_off++;
		intersection_on = 0;
	}
	if (!intersection_latch && intersection_on >= PATTERN_ON_DEBOUNCE
			&& enable_intersection_circle) {
		intersection_event_count++;
		intersection_latch = 1;
	}
	if (intersection_latch && intersection_off >= PATTERN_OFF_DEBOUNCE) {
		intersection_latch = 0;
	}
}
void set_right_motor(int speed) {
	// Set direction: FORWARD matches PID function (IN1=HIGH, IN2=LOW)
	HAL_GPIO_WritePin(RIGHT_IN1_GPIO, RIGHT_IN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(RIGHT_IN2_GPIO, RIGHT_IN2_Pin, GPIO_PIN_RESET);

	if (speed > PWM_MAX)
		speed = PWM_MAX;
	if (speed < 0)
		speed = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed); // Right motor
}

void set_left_motor(int speed) {
	// Set direction: FORWARD matches PID function (IN1=LOW, IN2=HIGH)
	HAL_GPIO_WritePin(LEFT_IN1_GPIO, LEFT_IN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LEFT_IN2_GPIO, LEFT_IN2_Pin, GPIO_PIN_SET);

	if (speed > PWM_MAX)
		speed = PWM_MAX;
	if (speed < 0)
		speed = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed); // Left motor
}

void set_left_motorPID(int speed) {
	if (speed >= 0) {
		// Forward
		HAL_GPIO_WritePin(LEFT_IN1_GPIO, LEFT_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LEFT_IN2_GPIO, LEFT_IN2_Pin, GPIO_PIN_SET);
		if (speed > PWM_MAX)
			speed = PWM_MAX;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
	} else {
		// Reverse
		HAL_GPIO_WritePin(LEFT_IN1_GPIO, LEFT_IN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LEFT_IN2_GPIO, LEFT_IN2_Pin, GPIO_PIN_RESET);
		int abs_speed = -speed;
		if (abs_speed > PWM_MAX)
			abs_speed = PWM_MAX;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs_speed);
	}
}

void set_right_motorPID(int speed) {
	if (speed >= 0) {
		// Forward
		HAL_GPIO_WritePin(RIGHT_IN1_GPIO, RIGHT_IN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RIGHT_IN2_GPIO, RIGHT_IN2_Pin, GPIO_PIN_RESET);
		if (speed > PWM_MAX)
			speed = PWM_MAX;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed);
	} else {
		// Reverse
		HAL_GPIO_WritePin(RIGHT_IN1_GPIO, RIGHT_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RIGHT_IN2_GPIO, RIGHT_IN2_Pin, GPIO_PIN_SET);
		int abs_speed = -speed;
		if (abs_speed > PWM_MAX)
			abs_speed = PWM_MAX;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs_speed);
	}
}
// Set left motor to reverse at given PWM duty cycle (0 to PWM_MAX)
void set_left_motor_reverse(int speed) {
	// REVERSE: IN1 = HIGH, IN2 = LOW
	HAL_GPIO_WritePin(LEFT_IN1_GPIO, LEFT_IN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LEFT_IN2_GPIO, LEFT_IN2_Pin, GPIO_PIN_RESET);

	if (speed > PWM_MAX)
		speed = PWM_MAX;
	if (speed < 0)
		speed = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed); // Left motor
}

// Set right motor to reverse at given PWM duty cycle (0 to PWM_MAX)
void set_right_motor_reverse(int speed) {
	// REVERSE: IN1 = LOW, IN2 = HIGH
	HAL_GPIO_WritePin(RIGHT_IN1_GPIO, RIGHT_IN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RIGHT_IN2_GPIO, RIGHT_IN2_Pin, GPIO_PIN_SET);

	if (speed > PWM_MAX)
		speed = PWM_MAX;
	if (speed < 0)
		speed = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed); // Right motor
}
/**
 * brief Set SG90 PWM pulse width in microseconds (PB8 - TIM4_CH3)
 */
void set_sg90_pulse_width(uint16_t pulse_us) {
	if (pulse_us < SG90_MIN_PULSE_US)
		pulse_us = SG90_MIN_PULSE_US;
	if (pulse_us > SG90_MAX_PULSE_US)
		pulse_us = SG90_MAX_PULSE_US;
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pulse_us);
}

/**
 * brief Set MG996R PWM pulse width in microseconds (PB9 - TIM4_CH4)
 */
void set_mg996r_pulse_width(uint16_t pulse_us) {
	if (pulse_us < MG996R_MIN_PULSE_US)
		pulse_us = MG996R_MIN_PULSE_US;
	if (pulse_us > MG996R_MAX_PULSE_US)
		pulse_us = MG996R_MAX_PULSE_US;
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pulse_us);
}

/**
 * @brief Calibrate IR sensors: find min/max values while user moves robot over black/white.
 *        Turns LED (PC13) ON during calibration and OFF after.
 */
void calibrate_ir_sensors(void) {
	calibrating = 1;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	HAL_Delay(1000);  // 1-second delay for user to move fingers away

	for (int i = 0; i < IR_SENSOR_COUNT; i++) {
		ir_min[i] = 0xFFFF;
		ir_max[i] = 0;
	}

	uint16_t iter = 0;
	while (iter < IR_CALIBRATE_ITER) {
		// Alternate motion every 30 iterations
		if ((iter / 30) % 2 == 0) {
			// Move LEFT: left motor backward, right motor forward
			HAL_GPIO_WritePin(LEFT_IN1_GPIO, LEFT_IN1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(LEFT_IN2_GPIO, LEFT_IN2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(RIGHT_IN1_GPIO, RIGHT_IN1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(RIGHT_IN2_GPIO, RIGHT_IN2_Pin, GPIO_PIN_RESET);
		} else {
			// Move RIGHT: left motor forward, right motor backward
			HAL_GPIO_WritePin(RIGHT_IN1_GPIO, RIGHT_IN1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(RIGHT_IN2_GPIO, RIGHT_IN2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LEFT_IN1_GPIO, LEFT_IN1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LEFT_IN2_GPIO, LEFT_IN2_Pin, GPIO_PIN_RESET);
		}

		set_left_motor(0);
		set_right_motor(0);

		// Wait for DMA update (fresh sample)
		while (!adc_ready)
			;
		adc_ready = 0;

		// Read ir_raw[] from DMA, update min/max
		for (int i = 0; i < IR_SENSOR_COUNT; i++) {
			uint16_t value = ir_raw[i];
			if (value < ir_min[i])
				ir_min[i] = value;
			if (value > ir_max[i])
				ir_max[i] = value;
		}

		HAL_Delay(IR_CALIBRATE_DELAY_MS);
		iter++;
	}

	// Stop motors after calibration
	set_left_motor(0);
	set_right_motor(0);

	calibrating = 0;
	ir_calibrated_ready = 1;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
}
/**
 * brief Normalize ir_raw[] to ir_normalized[] using ir_min[]/ir_max[], scales to 0-1000.
 *        0 = white surface, 1000 = black line.
 */
void normalize_ir_readings(void) {
	for (int i = 0; i < IR_SENSOR_COUNT; i++) {
		uint16_t min = ir_min[i];
		uint16_t max = ir_max[i];
		uint16_t value = (uint16_t) ir_filtered[i];
		if (max > min && value > min) {
			ir_normalized[i] = ((uint32_t) (value - min)) * IR_NORMALIZE_MAX
					/ (max - min);
			if (ir_normalized[i] > IR_NORMALIZE_MAX)
				ir_normalized[i] = IR_NORMALIZE_MAX;
		} else if (value <= min) {
			ir_normalized[i] = 0;
		} else {
			ir_normalized[i] = IR_NORMALIZE_MAX;
		}
	}
}

void compute_ir_position(void) {
	int32_t numerator = 0;
	int32_t denominator = 0;

	for (int i = 0; i < IR_SENSOR_COUNT; i++) {
		int weight = i * 1000; // 0, 1000, ..., 7000
		numerator += (int32_t) ir_normalized[i] * weight;
		denominator += ir_normalized[i];
	}

	if (denominator != 0) {
		ir_last_position = numerator / denominator;
		ir_position = ir_last_position;
		// No linger counter needed
	} else {
		// QTR-style: snap to edge based on last seen position
		if (ir_last_position < desired_position) {
			ir_position = 0;      // Far left (robot turns left)
		} else {
			ir_position = 7000;   // Far right (robot turns right)
		}
		// No linger, immediate snap
	}
}
void filter_ir_ema(void) {
	const float alpha = 0.1f; // adjust as needed
	for (int i = 0; i < IR_SENSOR_COUNT; i++) {
		ir_filtered[i] = alpha * ir_raw[i] + (1.0f - alpha) * ir_filtered[i];
	}
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_ADC1_Init();
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ir_raw, IR_SENSOR_COUNT);
	MX_TIM1_Init();
	MX_TIM3_Init();
	MX_TIM4_Init();
	MX_USART2_UART_Init();
	MX_TIM2_Init();
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
	HAL_UART_Receive_IT(&huart2, &uart2_rx_byte, 1);
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Left motor
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Right motor
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // SG90
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // MG996R
	TIM2_Init();

	// Ensure motors are off before any movement (set PWM to 0)
	set_left_motor(0);
	set_right_motor(0);

	// Initial servo positions
	set_sg90_pulse_width(500); //1250 grab limit 500 is 0

	// Turn off Trig Pin
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);

	// Calibrate IR sensors (LED ON during calibration)
	calibrate_ir_sensors();
	set_mg996r_pulse_width(1500); //1500 lift up 350 is 0 ex: 1700 drop on body, set mg996r to grabbing position after calibration
	HAL_Delay(1000);

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	static uint32_t last_ultra = 0;
	while (1) {
		if (adc_ready) {
			adc_ready = 0;
			filter_ir_ema();
			update_ir_patterns();

			if (left_most_latch || rightMost_latch || circle_latch
					|| intersection_latch) {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // LED OFF
			}
//             // --- Trigger ultrasonic every 50 ms (non-blocking) ---
//             uint32_t now = HAL_GetTick();
//             if (now - last_ultra >= 50) {
//                 ultrasonic_trigger();
//                 last_ultra = now;
//             }
//             float d = ultrasonic_read_cm();
//             if (d > 0) last_ultrasonic = d; // Use new reading if ready
			switch (current_state) {
			        case STATE_START:
			            // Full speed line follow at straight line start
			        	line_follow(0.12f, 0.0f, 20.0f, 0.4f);;
			            if (left_most_event_count >= 3 && rightMost_event_count >= 3) {
			                current_state = STATE_APPROACHING_O1;
			            }
			            break;

			        case STATE_APPROACHING_O1:
			            // Slow down, follow line, object incoming
			            line_follow(0.12f, 0.0f, 20.0f, 0.3f); //reduces wobbling when approaching can

			            // Wait until first intersection detected
			            if (intersection_event_count >= 1) {
			                // Stop the robot when it's detected
			                set_left_motor(0);
			                set_right_motor(0);
			                // Activate ultrasonic (start taking readings)
			                ultrasonic_active = 1;
			                last_ultra = HAL_GetTick(); // for timed ultrasonic triggers

			                // Transition to next state
			                current_state = STATE_GRAB_O1;
			            }
			            break;

			        case STATE_GRAB_O1: { // Go and grab that object
			            static uint8_t object_grabbed = 0;
			            static uint8_t moving_blind = 0;
			            static uint8_t finished = 0;

			            // Cap intersection count to 1 before object is grabbed
			            if (!object_grabbed && intersection_event_count > 1)
			                intersection_event_count = 1;

			            // 1. Move forward slowly (no line following)
			            if (!object_grabbed) {
			                set_left_motor(PWM_25PCT);
			                set_right_motor((int) (PWM_25PCT * 1.3));

			                uint32_t now = HAL_GetTick();
			                if (now - last_ultra >= 50) {
			                    ultrasonic_trigger();
			                    last_ultra = now;
			                }

			                float d = ultrasonic_read_cm();
			                if (d > 0 && d < 10.0f) {
			                    // 2. If object detected within 10cm, grab and lift
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    set_sg90_pulse_width(1100);   // Grab object
			                    HAL_Delay(500);             // Wait for gripper to close
			                    set_mg996r_pulse_width(1400); // Lift up
			                    HAL_Delay(500);               // Wait for arm to lift
			                    object_grabbed = 1;
			                    moving_blind = 1; // Ready to move forward blindly
			                }
			            } else if (moving_blind && !finished) {
			                // 3. Move forward slowly without line following ("blindly")
			                set_left_motor(PWM_25PCT);
			                set_right_motor((int) (PWM_25PCT * 1.3));

			                // 4. Check for line again (use intersection_latch as an example)
			                if (intersection_latch) {
			                    set_left_motor(PWM_25PCT);
			                    set_right_motor((int) (PWM_25PCT * 1.3));
			                    finished = 1;
			                    // Reset intersection, left and right count for the next state
			                    intersection_event_count = 0;
			                    left_most_event_count = 0;
			                    rightMost_event_count = 0;
			                    circle_event_count = 0; //reset all counter variables to combat noise
			                    // Transition to next state
			                    current_state = STATE_Linefollow_O1;
			                }
			            }
			            break;
			        }
			        case STATE_Linefollow_O1:
			            rightMost_event_count = 0; // Prevent rightMost from being counted in this state

			            // line_follow until leftMost_event_count == 1
			            if (left_most_event_count < 1) {
			                // PID gains for this segment: Kp=1.0, Ki=0.0, Kd=6.0, speed=0.4
			                line_follow(2.0f, 0.0f, 10.0f, 0.25f);
			            } else {
			                // if it counts to 1 then transition to another state which is STATE_LeaveO1_Curve1
			                current_state = STATE_LeaveO1_Curve1;
			            }
			            break;

			        case STATE_LeaveO1_Curve1:
			            // Prevent intersection from being counted in this state
			            intersection_event_count = 0;
			            intersection_latch = 0; // (if you use a latch)

			            // line_follow() at a slightly faster speed with its according PID gains
			            if (rightMost_event_count < 1) {
			                // PID gains for curve: Kp=0.5, Ki=0.0, Kd=5.0, speed=0.5
			                line_follow(1.0f, 0.0f, 10.0f, 0.4f);
			            } else {
			                current_state = STATE_SharpTurn_O1;
			            }
			            break;

			        case STATE_SharpTurn_O1:
			            // Follow line at sharp turn settings until intersection_event_count == 3
			            line_follow(0.6f, 0.0f, 10.0f, 0.3f);
			            if (intersection_event_count >= 1) {
			                current_state = STATE_CheckPoint_1;
			            }
			            break;

			        case STATE_CheckPoint_1:
			            // Line follow and speed up a bit
			            line_follow(0.12f, 0.0f, 22.0f, 0.5f);
			            // Speed up until intersection_event_count == 4
			            if (intersection_event_count >= 2) {
			                current_state = STATE_Drop_O1;
			            }
			            break;

			        case STATE_Drop_O1: {
			            static uint8_t dropped = 0;
			            static uint8_t reversing = 0;

			            if (!dropped) {
			                // Move forward blindly (no line following)
			                set_left_motor(PWM_25PCT);
			                set_right_motor((int) (PWM_25PCT * 1.3));

			                // Check if all IR sensors detect white
			                uint8_t all_white = 1;
			                for (int i = 0; i < IR_SENSOR_COUNT; i++) {
			                    if (ir_normalized[i] > 100) { // threshold for "not white", adjust as needed
			                        all_white = 0;
			                        break;
			                    }
			                }
			                if (all_white) {
			                    // Initiate drop sequence
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    set_mg996r_pulse_width(1500); // Drop object
			                    set_sg90_pulse_width(500);    // Release gripper
			                    dropped = 1;
			                    reversing = 1;
			                    intersection_event_count = 0;
			                }
			            } else if (reversing) {
			                // Blind reverse (no PID)
			                set_left_motor_reverse(PWM_25PCT*1.3);
			                set_right_motor_reverse(PWM_25PCT);
			                if (intersection_event_count >= 1) {
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    reversing = 0;
			                    dropped = 0; // reset for future use
			                    current_state = STATE_Leave_O1;
			                }
			            }
			            break;
			        }

			        case STATE_Leave_O1: {
			            static uint8_t turning_done = 0;
			            static uint8_t grabbed = 0;
			            static uint8_t ready_for_grab = 0; // To avoid triggering grab multiple times
			            static uint8_t waiting_for_next_intersection = 0;

			            if (!turning_done) {
			                // 1. Sharp right: left forward, right reverse, 50% speed
			                set_left_motor(PWM_50PCT);
			                set_right_motor_reverse(PWM_50PCT);

			                // Check if line is centered within ±100 of center (3500)
			                if (abs(ir_position - 3500) <= 100) {
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    HAL_Delay(80); // Short pause to stabilize
			                    turning_done = 1;
			                }
			            } else if (!grabbed) {
			                // 2. Line follow slow (25% speed, tuned PID for this segment)
			                line_follow(0.18f, 0.0f, 22.0f, 0.25f);

			                // 3. Wait for intersection == 5 AND object detected by ultrasonic
			                float d = ultrasonic_read_cm();
			                if ((intersection_event_count >= 3) && (d > 0)
			                        && (d <= 10.0f) && !ready_for_grab) {
			                    // Stop and initiate grab/lift
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    set_sg90_pulse_width(1100);   // Grab object
			                    HAL_Delay(500);         // Wait for gripper to close
			                    set_mg996r_pulse_width(1400); // Lift up
			                    HAL_Delay(500);              // Wait for arm to lift
			                    grabbed = 1;
			                    ready_for_grab = 1;
			                    waiting_for_next_intersection = 1;
			                    // Reset intersection for clean next phase
			                    intersection_event_count = 0;
			                }
			                // Reset grab trigger if we leave intersection or ultrasonic is not in range
			                if (intersection_event_count < 4 || d > 10.0f
			                        || d < 0) {
			                    ready_for_grab = 0;
			                }
			            } else if (waiting_for_next_intersection) {
			                // 4. After grabbing, line follow slowly until next intersection is detected
			                line_follow(0.18f, 0.0f, 22.0f, 0.25f);
			                if (intersection_latch) {
			                    // Stop at the next intersection and move to the next state
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    waiting_for_next_intersection = 0;
			                    grabbed = 0;
			                    turning_done = 0;
			                    current_state = STATE_Manual_1;
			                }
			            }
			            break;
			        }

			        case STATE_Manual_1: {
			            manual_mode_1_active = 1;
			            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

			            static uint8_t object_grabbed = 0;

			            // --- UART command handler
			            if (uart2_command_received) {
			                uart2_command_received = 0;
			                switch (uart2_rx_byte) {
			                case 'F': // Forward
			                    set_left_motor(PWM_50PCT);
			                    set_right_motor(PWM_50PCT);
			                    break;
			                case 'B': // Backward
			                    set_left_motor_reverse(PWM_50PCT);
			                    set_right_motor_reverse(PWM_50PCT);
			                    break;
			                case 'L': // Sharp left turn: left motor reverse, right motor forward
			                    set_left_motor_reverse(PWM_50PCT); // reverse left
			                    set_right_motor(PWM_50PCT);     // forward right
			                    break;
			                case 'R': // Sharp right turn: left motor forward, right motor reverse
			                    set_left_motor(PWM_50PCT);       // forward left
			                    set_right_motor_reverse(PWM_50PCT); // reverse right
			                    break;
			                case 'G': // Gentle left: left slow forward, right fast forward
			                    set_left_motor(PWM_25PCT);
			                    set_right_motor(PWM_50PCT);
			                    break;
			                case 'I': // Gentle right: left fast forward, right slow forward
			                    set_left_motor(PWM_50PCT);
			                    set_right_motor(PWM_25PCT);
			                    break;
			                case 'S': // Stop
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    break;
			                case 'V': // Release object (open gripper)
			                    set_mg996r_pulse_width(1500); // drop it down
			                    set_sg90_pulse_width(500); // Open gripper
			                    object_grabbed = 0;      // Allow grabbing again
			                    break;
			                }
			            }

			            // Grabbing logic for forward command
			            if (!object_grabbed && uart2_rx_byte == 'F') {
			                // Trigger and read ultrasonic every 50ms (non-blocking)
			                uint32_t now = HAL_GetTick();
			                static uint32_t last_ultra_manual = 0;
			                if (now - last_ultra_manual >= 50) {
			                    ultrasonic_trigger();
			                    last_ultra_manual = now;
			                }
			                float d = ultrasonic_read_cm();
			                if (d > 0 && d < 10.0f) {
			                    // Grabbing sequence
			                    set_left_motor(0);
			                    set_right_motor(0);
			                    set_sg90_pulse_width(1100); // Grab object (closed)
			                    HAL_Delay(500);     // Wait for gripper to close
			                    set_mg996r_pulse_width(1400); // Lift up
			                    HAL_Delay(500);          // Wait for arm to lift
			                    object_grabbed = 1;
			                }
			            }
			            break;
			        }

			        // You can add more states here if needed.

			        } // end switch(current_state)
		}
	}
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
}
/* USER CODE END 3 */

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */
void line_follow(float Kp, float Ki, float Kd, float base_speed_mult) {
	static float error = 0, last_error = 0;
	static float integral = 0, derivative = 0;

	if (ir_calibrated_ready) {
		normalize_ir_readings();
		compute_ir_position();

		error = desired_position - ir_position;

		// Deadband to prevent "sticking" around zero
		if (fabsf(error) < 10.0f) {
			error = 0;
			integral = 0; // prevent integral windup when on track
		}

		// Clamp integral to prevent windup
		float integral_max = 2000; // Tune this value as needed
		integral += error;
		if (integral > integral_max)
			integral = integral_max;
		if (integral < -integral_max)
			integral = -integral_max;

		derivative = error - last_error;

		float correction = Kp * error + Ki * integral + Kd * derivative;
		last_error = error;

		int base_speed = (int) (PWM_100PCT * base_speed_mult);

		int left_speed = base_speed + (int) correction;
		int right_speed = base_speed - (int) correction;

		// Don't allow negative speeds (no reverse). Clamp to 0.
		if (left_speed > PWM_MAX)
			left_speed = PWM_MAX;
		if (left_speed < 0)
			left_speed = 0;

		if (right_speed > PWM_MAX)
			right_speed = PWM_MAX;
		if (right_speed < 0)
			right_speed = 0;

		set_left_motorPID(left_speed);
		set_right_motorPID(right_speed);
	}
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
	if (hadc->Instance == ADC1) {
		adc_ready = 1;
	}
}
/* µs delay via TIM2 ---------------------------------------------------------*/
//void TIM2_Delay_us(volatile uint32_t us)
//{
//  uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
//  while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us);
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART2) {
		uart2_command_received = 1;
		// Start next reception immediately
		HAL_UART_Receive_IT(&huart2, &uart2_rx_byte, 1);
	}
}
void ultrasonic_trigger(void) {
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
	TIM2_Delay_us(2); // Small safety delay
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
	TIM2_Delay_us(10);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
		if (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) // Rising edge
				{
			echo_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		} else // Falling edge
		{
			echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			uint32_t pulse =
					(echo_end >= echo_start) ?
							(echo_end - echo_start) :
							((htim->Instance->ARR + 1 - echo_start) + echo_end);
			latest_distance_cm = pulse * SPEED_CM_DIV2_US; // 0.01755f
			echo_captured = 1;
		}
	}
}
float ultrasonic_read_cm(void) {
	if (echo_captured) {
		echo_captured = 0;
		return latest_distance_cm;
	}
	return -1.0f; // Not ready
}
/* USER CODE BEGIN 4 */
void TIM2_Delay_us(volatile uint32_t us) {
	uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
	while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us)
		;
}

void TIM2_Init(void) {
	__HAL_RCC_TIM2_CLK_ENABLE();

	htim2.Instance = TIM2;
	htim2.Init.Prescaler = (SystemCoreClock / 1000000) - 1;
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 0xFFFFFFFF;
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim2);
	HAL_TIM_Base_Start(&htim2);
}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
